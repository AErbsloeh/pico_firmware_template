// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// blink //
// ----- //
#define blink_wrap_target 2
#define blink_wrap 7
#define blink_pio_version 0


static const uint16_t blink_program_instructions[] = {
    0x80a0, //  0: pull   block                      
    0x6040, //  1: out    y, 32                      
            //     .wrap_target
    0xa022, //  2: mov    x, y                       
    0xe001, //  3: set    pins, 1                    
    0x0044, //  4: jmp    x--, 4                     
    0xa022, //  5: mov    x, y                       
    0xe000, //  6: set    pins, 0                    
    0x0047, //  7: jmp    x--, 7                     
            //     .wrap
};


#if !PICO_NO_HARDWARE
static const struct pio_program blink_program = {
    .instructions = blink_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = 0,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};


static inline pio_sm_config blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + blink_wrap_target, offset + blink_wrap);
    return c;
}


/*! \brief Funciton for initialising and starting a PIO function for generaing a CLK signal on defined PIN
    \param pio  PIO functionality
    \param pin  GPIO number for CLK generation
    \param freq Frequency value of generated CLK signal
*/
void clk_generation_pio_init(PIO pio, uint pin, uint freq) {
    uint sm = 0
    uint offset = pio_add_program(pio, &blink_program);

    // --- Init Phase
    gpio_init(CLK_PIO_PIN);
    gpio_set_dir(CLK_PIO_PIN);
    gpio_pull_down(CLK_PIO_PIN);
    gpio_put(CLK_PIO_PIN, false);

    // --- Defining PIO module
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = blink_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin, 1);
    pio_sm_init(pio, sm, offset, &c);

     // --- CLK value definition
    pio_sm_set_enabled(pio, sm, true);
    // PIO counter program takes 3 more cycles in total than we pass as
    // input (wait for n + 1; mov; jmp)
    pio->txf[sm] = (MCU_CLK / (2 * freq)) - 3;
}

#endif

